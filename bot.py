from telethon import TelegramClient, events
import threading
import re
import time

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, ElementClickInterceptedException
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ====
api_id = 21882740
api_hash = "c80a68894509d01a93f5acfeabfdd922"

KEYWORDS = [
    "#html_–∏_css_–≤–µ—Ä—Å—Ç–∫–∞",
    "#–≤–µ–±_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "#cms",
    "#–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω—ã_–∏_—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–∫–æ–º–º–µ—Ä—Ü–∏—è",
    "#—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–∞_–ø–æ–¥_–∫–ª—é—á",
    "#–¥–∏–∑–∞–π–Ω_—Å–∞–π—Ç–æ–≤"
]
KEYWORDS = [kw.lower() for kw in KEYWORDS]

COMMENT_TEXT = """–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! 

–Ø –æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º —ñ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —è–∫—ñ—Å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è

–°—Ç–µ–∫: Figma / html (bem), scss, js / WordPress ACF PRO

–ú–æ—ó —Ä–æ–±–æ—Ç–∏:
https://telya.ch/
https://gvadiko2004.github.io/grill/
https://gvadiko2004.github.io/Anon-shop/
https://iliarchie.github.io/cates/

–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.
–ó–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –¥—è–∫—É—é"""

# ==== –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Freelancehunt ====
EMAIL = "Vlari"
PASSWORD = "Gvadiko_2004"

# ---------------- –§—É–Ω–∫—Ü–∏–∏ ----------------
def type_text_slowly(element, text, delay=0.02):
    for ch in text:
        element.send_keys(ch)
        time.sleep(delay)

def extract_links(text):
    cleaned_text = text.replace("**", "")
    return re.findall(r"https?://[^\s]+", cleaned_text)

def login_if_needed(driver, wait):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω"""
    try:
        register_btn = wait.until(EC.element_to_be_clickable(
            (By.XPATH, '//a[contains(text(),"–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —Ç–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ø—Ä–æ—î–∫—Ç")]')
        ))
        register_btn.click()
        print("‚û°Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")

        login_input = wait.until(EC.element_to_be_clickable((By.ID, "login-0")))
        login_input.clear()
        type_text_slowly(login_input, EMAIL)

        pass_input = wait.until(EC.element_to_be_clickable((By.ID, "password-0")))
        pass_input.clear()
        type_text_slowly(pass_input, PASSWORD)

        pass_input.submit()
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        time.sleep(3)

    except TimeoutException:
        print("üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

def make_bid(driver, wait):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"""
    try:
        # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É"
        try:
            button = wait.until(EC.element_to_be_clickable((By.ID, "add-bid")))
        except TimeoutException:
            button = wait.until(EC.element_to_be_clickable(
                (By.XPATH, '//a[contains(text(),"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É")]')
            ))

        try:
            button.click()
        except ElementClickInterceptedException:
            driver.execute_script("arguments[0].click();", button)

        print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–∞–∂–∞—Ç–∞!")

        # –í–≤–æ–¥ —Ü–µ–Ω—ã
        try:
            price_span = wait.until(EC.presence_of_element_located((
                By.CSS_SELECTOR,
                "span.text-green.bold.pull-right.price.with-tooltip.hidden-xs"
            )))
            raw_price = price_span.text
            price_digits = re.sub(r"[^\d]", "", raw_price) or "1111"
        except Exception:
            price_digits = "1111"

        amount_input = wait.until(EC.element_to_be_clickable((By.ID, "amount-0")))
        amount_input.clear()
        type_text_slowly(amount_input, price_digits)

        # –í–≤–æ–¥ –¥–Ω–µ–π
        days_input = wait.until(EC.element_to_be_clickable((By.ID, "days_to_deliver-0")))
        days_input.clear()
        type_text_slowly(days_input, "3")

        # –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        textarea = wait.until(EC.element_to_be_clickable((By.ID, "comment-0")))
        type_text_slowly(textarea, COMMENT_TEXT)

        # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å"
        submit_btn = wait.until(EC.element_to_be_clickable(
            (By.XPATH, '//button[contains(text(),"–î–æ–±–∞–≤–∏—Ç—å")]')
        ))
        submit_btn.click()
        print("‚úÖ –°—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–¥–µ–ª–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")

def open_link_and_click(url):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Å—Ç–∞–≤–∫–∏"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # –ë–µ–∑ GUI
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    wait = WebDriverWait(driver, 20)

    try:
        driver.get(url)
        print(f"üåê –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")

        login_if_needed(driver, wait)
        make_bid(driver, wait)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ open_link_and_click: {e}")
    finally:
        driver.quit()

# ---------------- –¢–µ–ª–µ–≥—Ä–∞–º ----------------
client = TelegramClient("session", api_id, api_hash)

@client.on(events.NewMessage)
async def handler(event):
    message_text = (event.message.text or "").lower()
    if any(keyword in message_text for keyword in KEYWORDS):
        print(f"üîî –ù–∞—à—ë–ª –ø—Ä–æ–µ–∫—Ç: {message_text[:100]}")
        links = extract_links(message_text)
        if links:
            print(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é –∏ –∫–ª–∏–∫–∞—é –ø–æ —Å—Å—ã–ª–∫–µ: {links[0]}")
            threading.Thread(target=open_link_and_click, args=(links[0],), daemon=True).start()

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    client.start()
    client.run_until_disconnected()
