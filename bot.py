from telethon import TelegramClient, events
import threading
import os
import re
import time
import subprocess

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, ElementClickInterceptedException
from selenium.webdriver.chrome.options import Options

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ====
api_id = 21882740
api_hash = "c80a68894509d01a93f5acfeabfdd922"

KEYWORDS = [
    "#html_–∏_css_–≤–µ—Ä—Å—Ç–∫–∞",
    "#–≤–µ–±_–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "#cms",
    "#–∏–Ω—Ç–µ—Ä–Ω–µ—Ç_–º–∞–≥–∞–∑–∏–Ω—ã_–∏_—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è_–∫–æ–º–º–µ—Ä—Ü–∏—è",
    "#—Å–æ–∑–¥–∞–Ω–∏–µ_—Å–∞–π—Ç–∞_–ø–æ–¥_–∫–ª—é—á",
    "#–¥–∏–∑–∞–π–Ω_—Å–∞–π—Ç–æ–≤"
]
KEYWORDS = [kw.lower() for kw in KEYWORDS]

COMMENT_TEXT = """–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! 

–Ø –æ–∑–Ω–∞–π–æ–º–∏–≤—Å—è —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º —ñ –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–∏ –¥–æ —è–∫—ñ—Å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è

–°—Ç–µ–∫: Figma / html (bem), scss, js / WordPress ACF PRO

–ú–æ—ó —Ä–æ–±–æ—Ç–∏:
https://telya.ch/
https://gvadiko2004.github.io/grill/
https://gvadiko2004.github.io/Anon-shop/
https://iliarchie.github.io/cates/

–ó–≤'—è–∂—ñ—Ç—å—Å—è –∑—ñ –º–Ω–æ—é –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.
–ó–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –¥—è–∫—É—é"""

chromedriver_path = "/usr/bin/chromedriver"  # –ø—É—Ç—å –∫ ChromeDriver
remote_debug_port = 9222  # –ø–æ—Ä—Ç remote debugging

# ---------------- –§—É–Ω–∫—Ü–∏–∏ ----------------
def notify_linux(title, message):
    try:
        subprocess.run(["notify-send", title, message])
        print(f"[NOTIFY] {title}: {message}")
    except FileNotFoundError:
        print(f"[NOTIFY] {title}: {message} (notify-send –Ω–µ –Ω–∞–π–¥–µ–Ω)")

def type_text_slowly(element, text, delay=0.02):
    for ch in text:
        element.send_keys(ch)
        time.sleep(delay)

def extract_links(text):
    cleaned_text = text.replace("**", "")
    return re.findall(r"https?://[^\s]+", cleaned_text)

def open_link_and_click(url):
    options = Options()
    options.debugger_address = f"127.0.0.1:{remote_debug_port}"  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º—É Chrome
    driver = webdriver.Chrome(service=Service(chromedriver_path), options=options)
    wait = WebDriverWait(driver, 20)

    try:
        driver.get(url)
        print(f"üåê –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {url}")

        # --- –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É" ---
        button = None
        try:
            button = wait.until(EC.element_to_be_clickable((By.ID, "add-bid")))
        except TimeoutException:
            try:
                button = wait.until(EC.element_to_be_clickable(
                    (By.XPATH, '//a[contains(text(),"–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É")]')
                ))
            except TimeoutException:
                print("‚ùå –ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

        try:
            button.click()
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–∞–∂–∞—Ç–∞!")
        except ElementClickInterceptedException:
            driver.execute_script("arguments[0].click();", button)
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –Ω–∞–∂–∞—Ç–∞ —á–µ—Ä–µ–∑ JS!")

        time.sleep(2)

        # --- –í–≤–æ–¥ —Å—É–º–º—ã ---
        try:
            price_span = wait.until(EC.presence_of_element_located((
                By.CSS_SELECTOR,
                "span.text-green.bold.pull-right.price.with-tooltip.hidden-xs"
            )))
            raw_price = price_span.text
            price_digits = re.sub(r"[^\d]", "", raw_price) or "1111"
        except Exception:
            price_digits = "1111"

        amount_input = wait.until(EC.element_to_be_clickable((By.ID, "amount-0")))
        amount_input.clear()
        type_text_slowly(amount_input, price_digits)

        # --- –í–≤–æ–¥ –¥–Ω–µ–π ---
        days_input = wait.until(EC.element_to_be_clickable((By.ID, "days_to_deliver-0")))
        days_input.clear()
        type_text_slowly(days_input, "3")

        # --- –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è ---
        textarea = wait.until(EC.element_to_be_clickable((By.ID, "comment-0")))
        type_text_slowly(textarea, COMMENT_TEXT)

        # --- –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å" ---
        try:
            submit_btn = wait.until(EC.element_to_be_clickable(
                (By.XPATH, '//button[contains(text(),"–î–æ–±–∞–≤–∏—Ç—å")]')
            ))
            submit_btn.click()
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        except TimeoutException:
            print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        time.sleep(2)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ open_link_and_click: {e}")

# ---------------- –¢–µ–ª–µ–≥—Ä–∞–º ----------------
client = TelegramClient("session", api_id, api_hash)

@client.on(events.NewMessage)
async def handler(event):
    message_text = (event.message.text or "").lower()
    if any(keyword in message_text for keyword in KEYWORDS):
        print(f"üîî –ù–∞—à—ë–ª –ø—Ä–æ–µ–∫—Ç: {message_text[:100]}")
        notify_linux("–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ Freelancehunt!", message_text[:150])
        links = extract_links(message_text)
        if links:
            print(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é –∏ –∫–ª–∏–∫–∞—é –ø–æ —Å—Å—ã–ª–∫–µ: {links[0]}")
            threading.Thread(target=open_link_and_click, args=(links[0],), daemon=True).start()

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    client.start()
    client.run_until_disconnected()
